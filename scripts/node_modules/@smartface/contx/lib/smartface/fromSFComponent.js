(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', '../core/hooks', '../styling/StyleContext', '../styling/Stylable'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../core/hooks'), require('../styling/StyleContext'), require('../styling/Stylable'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.hooks, global.StyleContext, global.Stylable);
    global.fromSFComponent = mod.exports;
  }
})(this, function (exports, _hooks, _StyleContext, _Stylable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.extractTreeFromSFComponent = extractTreeFromSFComponent;
  exports.default = fromSFComponent;
  exports.createActorTreeFromSFComponent = createActorTreeFromSFComponent;

  var _hooks2 = _interopRequireDefault(_hooks);

  var StyleContext = _interopRequireWildcard(_StyleContext);

  var _Stylable2 = _interopRequireDefault(_Stylable);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  /**
   * Extract components tree from a SF Component
   * 
   * @param {Object} component - A sf-core component
   * @param {string} name - component name
   * @param {function} initialClassNameMap - classNames mapping with specified component and children
   * @param {?function} hookList - callback function to capture context's hooks
   * @param {?Object} acc [={}] - Accumulator
   * 
   * @return {function} - context helper
   */
  function extractTreeFromSFComponent(root, rootName, initialClassNameMap) {
    var acc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { '@@isEmpty': true };

    function buildContextTree(component, name) {
      var componentVars = void 0;

      if (name == rootName + "_statusBar") {
        componentVars = root.constructor.$$styleContext.statusBar || {};
      } else if (name == rootName + "_headerBar") {
        componentVars = root.constructor.$$styleContext.headerBar || {};
      } else {
        componentVars = component.constructor.$$styleContext || {};
      }

      var classNames = componentVars.classNames ? componentVars.classNames.trim() + " #" + name : "#" + name;

      if (acc[name] === undefined) {
        delete acc['@@isEmpty'];

        acc[name] = {
          component: component,
          classNames: classNames,
          initialProps: componentVars.initialProps,
          name: name
        };
      }

      component.children && Object.keys(component.children).forEach(function (child) {
        try {
          buildContextTree(component.children[child], name + "_" + child);
        } catch (e) {
          e.message = "Error when component would be collected: " + child + ". " + e.message;
          throw e;
        }
      });
    }

    buildContextTree(root, rootName);

    return acc;
  }

  function fromSFComponent(root, rootName) {
    var hooksList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var collection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var ctree = extractTreeFromSFComponent(root, rootName, null);

    Object.keys(ctree).forEach(function (name) {
      var item = ctree[name];
      ctree[name] = collection[name] || (0, _Stylable2.default)(item);
    });

    return StyleContext.createStyleContext(ctree, (0, _hooks2.default)(hooksList), function updateContextTree() {
      var contextElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return fromSFComponent(root, rootName, null, hooksList, contextElements);
    });
  }

  function createActorTreeFromSFComponent(root, rootName) {
    var collection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var ctree = extractTreeFromSFComponent(root, rootName, null);

    Object.keys(ctree).forEach(function (name) {
      var item = ctree[name];
      ctree[name] = collection[name] || (0, _Stylable2.default)(item);
    });

    return ctree;
  }
});